CLI Commands

rustc --version
rustc <filename>
cargo new <projectname>
cargo build
cargo check  - check for compiler errors no build
cargo run  - build and run
cargo update - update dependencies to most recent versions
cargo doc --open  auto build docs for src + dependencies

rustup update
rustup doc
rustup component add rustfmt   - adds component rust formatting tool


Language

Immutable by default must declare mut explicitly for each variable.
let x = 5;  vs  let mut x = 5;

Associated functions - String::new() syntax for calling a function
associated with a type, generally would call this a static method.

References use & and are immutable by default so you often have to
use mut on them. &mut varname.

Match - a lot like a switch

match number {
    1 => println!("One!"),
    2 => println!("Two!"),
}

Errors and successes are dealt with by enumeration types so we often
use match's to do error handling.

let var : u32 = match inputstring.parse() {
    Ok(num) => num,
    Err(_) => continue,
}

Constants

const x:u32 = 69;

Constants must be type annotated, are always immutable and are initialized at
compilation. You can never assign the result of a function or any other runtime
calculation to a constant. Good stuff.

Shadowing

let x = 5;
let x = "five";

In rust we're allowed to overwrite the names of previous variables. Not their
memory, there's still a number type with the value of 5 until its presumably
destroyed somehow. But whenever we reference "x" it now refers to "five". They
call this shadowing and use it to keep code clean as though we were using a language
like python.... which come to think of it does the same thing under the hood. Creates
a new object in memory and points the identifier to it.... but more explicit.
Good stuff.

Types

Scalar Types: int, floating point, boolean, character

Integer

signed and unsigned variants annotated like
let x:u32;  let x:i32;   sizes are 8,16,32,64,128 and 'size' which is architecture
dependent (32 bit on 32 and 64 on 64 apparently)

Exits with error on assignment of overflowing literals to integers. Wrapping type
exists that allows you to do this but only if you set it explicitly.

Floats

f32 and f64 are the default ones, f64 reccomended on modern cpus since its about as
fast. f64 is also the default.

Boolean

let x = true;   or   let x:bool = true;
lowercase for the boolean literals, booleans are one byte in size.

Character

let c = 'a';
uses single and double quote convention for chars vs string literals from c.
Chars are unicode by default, not ascii, that's interesting seems good though.

Compound Types: tuples, arrays

Tuples

let tup = (500, 6.4, 1);  or  let tup: (i32, f64, u8) = (500, 6.4, 1);
Python style variable 'destructuring'
let (x, y, z) = tup;

Indexing tuples is done like   tup.0, tup.1, etc...  why this instead of tup[0]?
For that matter what is the difference between these and structs? A useful thing
to know here is that tuples containing only 'copy' types for instance

let tup: (i32, i32) = (50,50);

is itself a copy type (the values are copied rather than the reference) and is
allocated entirely on the stack. Is the same true for structs containing only
copy types?

Arrays

let a: [i32; 5] = [1, 2, 3, 4, 5];  or let a = [1,2,3,4,5];
Standard c / c++ style fixed length, fixed type array indexed in the normal way.
a[0], a[1] etc... allocated on the stack. Are tuples not stack allocated?

Syntax is a little different from c here, uses a two part type annotation [type; length]
instead of type name [length]; Its pretty sensible though I like it. Also has some
sort of automatic bounds checking for array overflows. C actually stores the length
of its arrays too but when you're passing them its generally just passing the array
as a pointer so you don't keep the length when you're operating on it. Rust must
be doing something differently here.


Functions

fn hello_world() {
    println!("hello to the world");
}

Snake case by convention.

fn parameterized(x: i32){
    println!("{}", x);
}

Function parameters must be type annotated, we can't use type inference to make
generic functions like we can with auto and friends.

Functions can return tuples for easy multivalue returns like if we were working
in python.

fn calculate_length(s: String) -> (String, usize){
    let length = s.len();
    (s, length)
}
Note that for the above function, the return value is implictly given by the
evaluation of the block scope {}, which for any block scope is the expression
value. So this actually behaves the same is if we did an assignment based on a
block.  let x: i32 = {do something; 15};  This is why the semicolon must be
left off the final tuple (putting a semicolon turns it into a statement) and
means the block itself is no longer an expression. I like the consistency of this.

Expressions and Statements

statements do not return values, so in rust you can't assign a statement to a
variable. There are two things that are statements in rust that are expressions in
c and other languages and restrict us from doing bad/fun things.

functions and variable assignments. So no..  let x = let y = 6;  or
let x = fn my_function(){}

Literal operations are expressions  3 + 3
Macros are expressions  ??
Blocks are expressions  let x = {let y = 5;  y+5};
Literal operations with semicolon are statements:  x + 5;  or 3 + 3;


What in the world is with these block, scope expression things, they're kind of
cool but what in the world would we use them for?

Functions Return Value
fn five() -> i32{
    5
}

Functions do the matlab style of implicitly returning the last expression value
from the function as the return. We have to declare a type of return beforehand.
So the following does not work.

fn five() -> i32{
    5;
}

We can also explicitly return with a return statement, which is necessary in some
cases with branching statments and etc.

fn numbers(x: i32) -> i32{
    if(x < 5){
        return 1;
    }
    else{
        return 99999;
    }
}

Comments

C style comments everywhere //comment
Something called documentation comments exists but it does not sound like they
have the normal multi-line comments just single line by default I guess.

Control Flow

If

let x = 5;
if x < 5{
    println!("less than five");
}
else{
    println!("greater than five");
}

Pretty standard c style again, does not require parentheses just uses expressions
that return a boolean I think?  Yes! No automatic conversion of types like integer
to boolean like js and python. If its not returning an actual boolean it throws an
error.

let x = 66;
if x {
    println!("never get here this is an error");
}

No elif for our boy rust, just use standard else if to handle multiple branching.

if x < 5{

} else if x == 6{

} else if x == 7{

} else{

}

Conditionals are expressions so we can do our ternary type assignments like this.

let x : bool = if x < 5 {
    true
} else{
    false   // note we must leave off the semicolon to have an expression
}

Loops: loop, while, for

loop is like a while(true), just repeats forever until we hit a break statement
or call some sort of termination like ctr+c.

loop{
    println!("this is the song that never ends");
}

Oh so this is neat, loop actually is an expression as well just like an if expression
in rust so we can assign values based on a loop. break can actually return values like
a return statement.. and without them it gives the expression value maybe? Nope,
must explicitly return.  break with no arguments after returns empty type () which
gives an error.  Also have to end loop with a semicolon since the whole thing is a
statment when assigning.


While

let mut number = 3;

while number != 0 {
    println!("{}!", number);
    number = number - 1;
}

while loops are absolutely standard c/c++/everything style while loops that continue
while the expression they are declared with evaluates to true. Not as easy to do
the cute assign from the expression value of the loop with whiles.

For

No c style for, this is a for each loop by default. Goes element by element over
things with an iter() method? Arrays are itterable looks like tuples are not
bet you they're secretly just structs.

for number in (1..4).rev() {
    println!("{}!", number);
}

We also have some convenience iterator functions like rev() looks like and some
sort of syntax for creating an array within a range with (1..4) I guess?  Thats
an array not a tuple right? It's a struct std::ops::Range. Likely has some sort
of generator to allow it to do long ranges like in python.

Strings

let s = String::from("hello");

So these are a little interesting in rust. They deal with it a little bit like
arrays in c where what's actually stored in the variable on the stack is a pointer
to the memory location on the heap. Similarly this gives us a pointer, length and
capacity. The length is the current amount being used and the capacity is the
total amount allocated.

let s2 = s;   // copies over only the reference to the string object on the heap

What this does is copies over the reference and invalidates the initial reference
s, if you try to then reference s it throws an error. So they call the assignment
operation on strings like this a move rather than a copy since there's only ever
one valid reference to the heap object at a time. Prevents any double frees.

If we do want to do an actual copy of the data from the heap to another object
we use clone() method. I dig the syntax super explicit to what its doing.

let s1 = String::from("hello");
let s2 = s1.clone();

This only applies to types like strings that are typically non-static size and
heap allocated. Things like integers have a different 'annotation' that allows
them to be copied like

let x = 5;
let y = x;

without invalidating the intial x. Trait is called 'copy' the variables with this
value don't need anything special done when 'drop' the special function called
when a variable goes out of scope is called. Presumably this is a raii pattern thing
types that don't acquire any external resources can just be directly unallocated
on the stack and we don't have to worry about causing any memory leaks from prematurely
freeing them. All the scalar types and tuples that only contain other copy types
are copy. Yah I like this, it makes what happens with resource allocation pretty godamn
explicit. Similar thing with functions, acts like a copy

References

Uses c++ style references for everything.
let x: u32 = 5;
let y: &u32 = &x;
let z: &u32;

& is the reference operator, gives a reference to the thing and * is dereference.
behaves a little interestingly in the case of things like arrays and strings
that under the hood are a pointer, length, etc.. the references the actual object
on the heap. Instead of copying that and potentially having multiple floating
around that complicate when it will be unallocated we just have a reference to
that single reference object. References are read only by default.

Mutable References

This gets pretty interesting too. So first we are only allowed to have a mutable
reference to a mutable type. Then we are only allowed to have one mutable reference
to a given object in each given scope. Can have any number of immutable references.
Also not allowed to mix for some reason, so no mutable and immutable.

Slices

So this is cool they have a slice syntax fairly similar to python but with ..
instead of : , what is kind of cool about this is what its doing under the hood
seems to be pointer math. It's getting a pointer to some start position within
the array/string type and a length of how far to go to. I think this makes it
basically like a second reference to the initial memory location. Can these be
mutable then or are you only allowed to read from them?

let slice = &a[1..5]

Structs

struct User {
    username: String,
    email: String,
    sign_in_count: u64,
    active: bool,
}

Ok so I think the difference between the struct and the tuple is that the tuple
does not have named fields while the struct does. Good difference to keep an
eye on.
